import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import { TMPDIR } from '../extension';
import util from 'util';
import { SETTINGS } from '../helper/extensionConstants';

const exec = util.promisify(require('child_process').exec);


export interface GenerateGraphParameters {
    functionname: string
}

/**
 * Generate the program graph for the currently open program
 */
export default async function generateGraph(params: GenerateGraphParameters) {
    // [TODO]: Validate config here
    const APPPATH = SETTINGS.getAPPPATH();

    // Check if the user has an open text editor
    if(vscode.window.activeTextEditor !== undefined){
        // Get the open file as path
        const currOpenFile = vscode.window.activeTextEditor.document.uri;
        const extension = path.extname(currOpenFile.fsPath);
        const filename = path.basename(currOpenFile.fsPath, extension);

        // Path to the energy profile in the temporary directory of the device 
        const profilepath = `${TMPDIR}/profile.json`;
        
        // Check if the profile is present
        if(fs.existsSync(profilepath)){
            // We need to validate that we encountered a c++ file
            if(extension === ".cpp"){
                // Check if a compiled folder is present in the temp folder, if not create it
                try{
                    if(!fs.existsSync(`${TMPDIR}/compiled`)){
                        fs.mkdirSync(`${TMPDIR}/compiled`);
                    }

                    // Execute the compile process for the open file
                    const { error: compileError } = await exec(`clang++ -g -O0 -Xclang -disable-O0-optnone -fno-discard-value-names -S -emit-llvm -o ${TMPDIR}/compiled/${filename}.ll ${currOpenFile.fsPath}`);
                    if(compileError){
                        vscode.window.showErrorMessage(`File could not be compiled!\n\n Reason:\n${compileError}`);
                    }else{
                        // If the compilation ran successfully, execute the graph analysis
                        console.log("Compilation finished!");

                        let graphCommand = `${APPPATH} analyze --profile ${profilepath} --mode graph --format json --strategy worst --loopbound 100 --withCalls --program ${TMPDIR}/compiled/${filename}.ll > ${TMPDIR}/graph.dot`;
                        if(params && params.functionname !== ""){
                            console.log(params.functionname);

                            graphCommand = `${APPPATH} analyze --profile ${profilepath} --mode graph --format json --strategy worst --loopbound 100 --withCalls --forFunction ${params.functionname} --program ${TMPDIR}/compiled/${filename}.ll > ${TMPDIR}/graph.dot`;
                        }

                        const { graphgenerationError } = await exec(graphCommand);

                        
                        if(graphgenerationError){
                            console.error(graphgenerationError);
                            vscode.window.showErrorMessage(`The graph could not be generated!`);
                        }else{
                            // If the graph analysis ran successfully generate a pdf from the .dot file generated by spear
                            const { pdfConvertError } = await exec(`dot -Tpdf ${TMPDIR}/graph.dot > ${TMPDIR}/graph.pdf`);

                            if(pdfConvertError){
                                vscode.window.showErrorMessage(`Could not generate viewable graph!`);
                            }else{
                                // If the .pdf generation ran without error, open the pdf using xdg-open
                                // [TODO]: Validate that this command is platform independent
                                const { pdfViewerError } = await exec(`xdg-open ${TMPDIR}/graph.pdf`);
                                if(pdfViewerError){
                                    console.error(pdfViewerError);
                                    vscode.window.showErrorMessage(`Error opening pdf file!`);
                                }
                            }
                        }
                    }
                    
                }catch(e){
                    console.error(e);
                    vscode.window.showErrorMessage(`The graph for the function could not be generated! Either the function was not used in the Program or SPEAR failed to analyze it. If you feel like this is possibly a bug, please create an issue on gihub!`);
                }
            }else{
                vscode.window.showErrorMessage("The current file is not a c++ file!");
            }
        }else{
            vscode.window.showErrorMessage("No profile found!. Please profile the system first");
        }
    }
}